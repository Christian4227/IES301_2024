generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  email_confirmed Boolean  @default(false)
  birth_date      DateTime @default(now()) @db.Date
  name            String   @db.VarChar(256)
  phone           String?
  phone_fix       String?
  role            Role     @default(SPECTATOR)
  salt            String
  created_at      DateTime @default(now()) @db.Timestamptz(0)
  updated_at      DateTime @updatedAt @db.Timestamptz(0)
  Event           Event[]

  @@map("USERS")
}

model Venue {
  id           BigInt   @id @default(autoincrement())
  address_type String   @db.VarChar(256)
  address      String   @db.VarChar(512)
  number       String   @db.VarChar(10)
  zip_code     String   @db.VarChar(10)
  city         String   @db.VarChar(256)
  uf           String   @db.VarChar(2)
  country      String   @default("BRASIL") @db.VarChar(512)
  complements  String   @db.VarChar(512)
  created_at   DateTime @default(now()) @db.Timestamptz(0)
  updated_at   DateTime @updatedAt @db.Timestamptz(0)
  Event        Event[]

  @@map("VENUES")
}

model OrderItem {
  id         BigInt   @id @default(autoincrement())
  order_id   String
  unit_price BigInt
  created_at DateTime @default(now()) @db.Timestamptz(0)
  updated_at DateTime @updatedAt @db.Timestamptz(0)

  @@map("ORDERITEMS")
}

model Order {
  id             String       @id @default(uuid())
  total_amount   BigInt
  status         OrderStatus  @default(PENDING)
  payment_method PaymenMethod @default(PIX)
  created_at     DateTime     @default(now()) @db.Timestamptz(0)
  updated_at     DateTime     @updatedAt @db.Timestamptz(0)

  @@map("ORDERS")
}

model Ticket {
  id         String       @id @default(uuid())
  event_id   BigInt
  status     TicketStatus @default(AVAILABLE)
  type_id    BigInt
  created_at DateTime     @default(now()) @db.Timestamptz(0)
  updated_at DateTime     @updatedAt @db.Timestamptz(0)

  type  TypeTicket @relation(fields: [type_id], references: [id])
  event Event      @relation(fields: [event_id], references: [id])

  @@map("TICKETS")
}

model TypeTicket {
  id          BigInt @id @default(autoincrement())
  name        String @unique @db.VarChar(256)
  discount    Int    @default(0) @db.SmallInt
  description String @db.VarChar(1024)

  created_at DateTime @default(now()) @db.Timestamptz(0)
  updated_at DateTime @updatedAt @db.Timestamptz(0)
  Ticket     Ticket[]

  @@map("TYPETICKETS")
}

model Event {
  id            BigInt      @id @default(autoincrement())
  user_id       String
  name          String      @db.VarChar(256)
  description   String      @db.VarChar(1024)
  initial_date  DateTime    @db.Timestamptz(0)
  final_date    DateTime    @db.Timestamptz(0)
  category_id   BigInt
  status        EventStatus @default(PLANNED)
  base_price    BigInt
  capacity      BigInt
  img_banner    String      @db.VarChar
  img_thumbnail String?     @db.VarChar
  location_id   BigInt
  created_at    DateTime    @default(now()) @db.Timestamptz(0)
  updated_at    DateTime    @updatedAt @db.Timestamptz(0)

  category      Category @relation(fields: [category_id], references: [id])
  event_manager User     @relation(fields: [user_id], references: [id])
  location      Venue    @relation(fields: [location_id], references: [id])
  Ticket        Ticket[]

  @@map("EVENTS")
}

model Category {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(128)
  description String   @db.VarChar(1024)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)
  events      Event[]

  @@map("CATEGORIES")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymenMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  PIX
}

enum Role {
  ADMIN
  EVENT_MANAGER
  STAFF
  SPECTATOR
}

enum EventStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
}
