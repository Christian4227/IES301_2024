generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  email                  String    @unique
  password               String
  email_confirmed        Boolean   @default(false)
  birth_date             DateTime  @default(now()) @db.Date
  name                   String    @db.VarChar(256)
  phone                  String
  phone_fix              String?
  role                   Role      @default(SPECTATOR)
  salt                   String
  token   String?   @unique
  token_expires DateTime?
  created_at             DateTime  @default(now()) @db.Timestamp(0)
  updated_at             DateTime  @updatedAt @db.Timestamp(0)
  active                 Boolean   @default(true)
  Event                  Event[]
  Order                  Order[]

  @@map("USERS")
}

model Venue {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar
  address_type String   @db.VarChar(256)
  address      String   @db.VarChar(512)
  number       String   @db.VarChar(10)
  zip_code     String   @db.VarChar(10)
  city         String   @db.VarChar(256)
  uf           String   @db.VarChar(2)
  country      String   @default("BRASIL") @db.VarChar(512)
  complements  String   @db.VarChar(512)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @updatedAt @db.Timestamp(0)

  Event Event[]

  @@map("VENUES")
}

model Order {
  id             String       @id @default(uuid())
  customer_id    String
  total_amount   BigInt       @db.BigInt()
  status         OrderStatus  @default(PROCESSING)
  payment_method PaymenMethod @default(PIX)
  created_at     DateTime     @default(now()) @db.Timestamp(0)
  updated_at     DateTime     @updatedAt @db.Timestamp(0)

  customer User @relation(fields: [customer_id], references: [id])

  @@map("ORDERS")
}

model OrderTicket {
  id         Int        @id @default(autoincrement())
  order_id   String
  unit_price Int        @db.Integer()
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @updatedAt @db.Timestamp(0)
  type_id    Int        @db.Integer()
  type       TicketType @relation(fields: [type_id], references: [id])

  @@map("ORDERTICKETS")
}

model Ticket {
  id         String       @id @default(uuid())
  event_id   Int          @db.Integer()
  status     TicketStatus @default(AVAILABLE)
  created_at DateTime     @default(now()) @db.Timestamp(0)
  updated_at DateTime     @updatedAt @db.Timestamp(0)

  event Event @relation(fields: [event_id], references: [id])

  @@map("TICKETS")
}

model TicketType {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(256)
  discount    Int           @default(0) @db.SmallInt
  description String        @db.VarChar(1024)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime      @updatedAt @db.Timestamp(0)
  OrderTicket OrderTicket[]

  @@map("TICKETTYPES")
}

model Event {
  id            Int         @id @default(autoincrement())
  manager_id    String
  name          String      @db.VarChar(256)
  description   String      @db.VarChar(1024)
  initial_date  DateTime    @db.Timestamp(0)
  final_date    DateTime    @db.Timestamp(0)
  category_id   Int         @db.Integer
  status        EventStatus @default(PLANNED)
  base_price    Int         @db.Integer
  capacity      Int         @db.Integer
  img_banner    String      @db.VarChar
  img_thumbnail String?     @db.VarChar
  location_id   Int
  color         String      @db.VarChar()
  created_at    DateTime    @default(now()) @db.Timestamp(0)
  updated_at    DateTime    @updatedAt @db.Timestamp(0)

  category      Category @relation(fields: [category_id], references: [id])
  event_manager User     @relation(fields: [manager_id], references: [id])
  location      Venue    @relation(fields: [location_id], references: [id])
  Ticket        Ticket[]

  @@map("EVENTS")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(128)
  description String   @db.VarChar(1024)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt @db.Timestamp(0)
  events      Event[]

  @@map("CATEGORIES")
}

enum OrderStatus {
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymenMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  PIX
}

enum Role {
  ADMIN
  EVENT_MANAGER
  STAFF
  SPECTATOR
}

enum EventStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
  CANCELLED
}
