generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  email_confirmed Boolean   @default(false)
  birth_date      DateTime  @default(now()) @db.Date
  name            String    @db.VarChar(256)
  phone           String    @default("")
  phone_fix       String?
  role            Role      @default(SPECTATOR)
  salt            String
  token           String?   @unique
  token_expires   DateTime?
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  updated_at      DateTime  @updatedAt @db.Timestamp(0)
  active          Boolean   @default(true)
  Events          Event[]   @relation("UserEvents")
  Orders          Order[]

  @@index([email])
  @@map("USERS")
}

model Venue {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar
  address_type String   @db.VarChar(256)
  address      String   @db.VarChar(512)
  number       String   @db.VarChar(200)
  zip_code     String   @db.VarChar(200)
  city         String   @db.VarChar(256)
  uf           String   @db.VarChar(2)
  country      String   @default("BRASIL") @db.VarChar(512)
  complements  String   @db.VarChar(512)
  latitude     Float    @db.DoublePrecision
  longitude    Float    @db.DoublePrecision
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @updatedAt @db.Timestamp(0)
  Events       Event[]

  @@map("VENUES")
}

model Order {
  id             String        @id @default(uuid())
  customer_id    String
  event_id       Int
  total_amount   Int
  status         OrderStatus   @default(PROCESSING)
  payment_method PaymentMethod @default(PIX)
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  updated_at     DateTime      @updatedAt @db.Timestamp(0)
  event          Event         @relation(fields: [event_id], references: [id])
  customer       User          @relation(fields: [customer_id], references: [id])
  OrderTicket    OrderTicket[]

  @@index([customer_id, event_id])
  @@map("ORDERS")
}

model Ticket {
  id          String        @id @default(uuid())
  event_id    Int
  status      TicketStatus  @default(AVAILABLE)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime      @updatedAt @db.Timestamp(0)
  event       Event         @relation(fields: [event_id], references: [id])
  OrderTicket OrderTicket[]

  @@index([event_id])
  @@map("TICKETS")
}

model OrderTicket {
  id           Int         @id @default(autoincrement())
  order_id     String
  ticket_id    String
  unit_price   Int
  created_at   DateTime    @default(now()) @db.Timestamp(0)
  updated_at   DateTime    @updatedAt @db.Timestamp(0)
  order        Order       @relation(fields: [order_id], references: [id])
  ticket       Ticket      @relation(fields: [ticket_id], references: [id])
  TicketType   TicketType? @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int?

  @@index([order_id, ticket_id])
  @@map("ORDERTICKETS")
}

model TicketType {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(256)
  discount     Int           @default(0) @db.SmallInt
  description  String        @db.VarChar(1024)
  created_at   DateTime      @default(now()) @db.Timestamp(0)
  updated_at   DateTime      @updatedAt @db.Timestamp(0)
  OrderTickets OrderTicket[]

  @@map("TICKETTYPES")
}

model Event {
  id            Int         @id @default(autoincrement())
  manager_id    String
  name          String      @db.VarChar(256)
  description   String      @db.VarChar(1024)
  initial_date  DateTime    @db.Timestamp(0)
  final_date    DateTime    @db.Timestamp(0)
  category_id   Int
  status        EventStatus @default(PLANNED)
  base_price    Int
  capacity      Int
  img_banner    String      @db.VarChar
  img_thumbnail String?     @db.VarChar
  location_id   Int
  color         String      @db.VarChar
  created_at    DateTime    @default(now()) @db.Timestamp(0)
  updated_at    DateTime    @updatedAt @db.Timestamp(0)
  category      Category    @relation(fields: [category_id], references: [id])
  event_manager User        @relation(fields: [manager_id], references: [id], name: "UserEvents")
  location      Venue       @relation(fields: [location_id], references: [id])
  Tickets       Ticket[]
  Orders        Order[]

  @@index([category_id, manager_id, location_id])
  @@map("EVENTS")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(128)
  description String   @db.VarChar(1024)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt @db.Timestamp(0)
  events      Event[]

  @@map("CATEGORIES")
}

enum OrderStatus {
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  PIX
}

enum Role {
  ADMIN
  EVENT_MANAGER
  STAFF
  SPECTATOR
}

enum EventStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
  CANCELLED
}
